DAY3 23-11-24

LOOPS
for				when the number of iterations is know before start of the loop
while			when no of iterations is unknown
do-while		when no of iterations is unknown, but it is atleast one.


-----------------------------------------------------
p27
#include<stdio.h>
#include<stdlib.h>
//program to print table of a number till multiple of 20

int main(int argcount, char *args[]) 
{
    int input_number = atoi(args[1]);
    for (int i = 1; i <= 20; i++)
    {
        printf("%d * %02d = %03d \n", input_number, i, input_number * i);
    }
}

for printing 2 tables 

#include<stdio.h>
#include<stdlib.h>
//program to print table of a number till multiple of 20

int main(int argcount, char *args[]) 
{
    int input_number1 = atoi(args[1]);
    int input_number2 = atoi(args[2]);
    for (int i = 1; i <= 20; i++)
    {
        printf("%d * %02d = %03d \t %d * %02d = %03d \n", input_number1, i, input_number1 * i, input_number2, i, input_number2 * i);
    }
}
---------------------------------------------------------


Farmer problem logic

total_land = 80
no_of_segments = 5
each_segment = total_land // no_of_segments
 
tamoto_yield_tonnes = (each_segment * 0.3 * 10) + (each_segment * 0.7 *12)
tomato_sales_amount = int(tamoto_yield_tonnes * 1000 * 7)
 
potato_yeild_tonnes = each_segment * 10
potato_sales_amount = potato_yeild_tonnes * 1000 * 20
 
cabbage_yeild_tonnes = each_segment * 14
cabbage_sales_amount = cabbage_yeild_tonnes * 1000 * 24
 
sunflower_yeild_tonnes = each_segment * 0.7
sunflower_sales_amount = int(sunflower_yeild_tonnes * 1000 * 200)
 
sugarcane_yeild_tonnes = each_segment * 45
sugarcane_sales_amount = sugarcane_yeild_tonnes * 4000
 
total_sales_amount = tomato_sales_amount + potato_sales_amount + sunflower_sales_amount + sugarcane_sales_amount

----------------------------------------------------
p28
Find the biggest and smallest digits in a number
 
 #include<stdio.h>
#include<stdlib.h>
//program to find the biggest and the smallest digit in a number
int main(int argCount, char *args[])
{
    int input_number = atoi(args[1]);
    printf("User given number is %d \n", input_number);
    int small_digit = 9, big_digit = 0, remainder_digit = 0;
    while (input_number != 0)
    {
        remainder_digit = input_number % 10;
        if (small_digit > remainder_digit)
            small_digit = remainder_digit;
        if (big_digit < remainder_digit)
            big_digit = remainder_digit;
        input_number = input_number / 10;
    }
    printf("Smallest digit = %d, Biggest Digit = %d", small_digit, big_digit);
}
 
-----------------------------------------------------------
p29
Count the number of Even digits in a number
 
 #include<stdio.h>
#include<stdlib.h>
//program to count the number of even digits in a number
int main(int argCount, char *args[])
{
    int input_number = atoi(args[1]);
    printf("User given number is %d \n", input_number);
    int evendigit_count = 0, remainder_digit = 0;
    while (input_number != 0)
    {
        remainder_digit = input_number % 10;
        if (remainder_digit % 2 == 0)
            evendigit_count++;
        input_number = input_number / 10;
    }
    printf("Number of even digits: %d", evendigit_count);
}
 
-----------------------------------------------------
*p30
Find sum of Even placed digits in a number
 
 #include <stdio.h>
#include <stdlib.h>

int main(int argCount, char *args[])
{
    int inputNumber = atoi(args[1]);
    int sumOfDigits1 = 0, sumOfDigits2 = 0, flip = 0, remainderDigit = 0;
    printf("User given number is %d \n", inputNumber);
    while (inputNumber != 0)
    {
        remainderDigit = inputNumber % 10;
        inputNumber = inputNumber / 10;
        if (flip == 0)
        {
            sumOfDigits1 += remainderDigit;
            flip = 1;
        }
        else
        {
            sumOfDigits2 += remainderDigit;
            flip = 0;
        }
    }
    if (flip == 0)
        printf("Sum of even placed digits is %d", sumOfDigits1);
    else
        printf("Sum of even placed digits is %d", sumOfDigits2);
}
 
--------------------------------------------------------
p31
Find sum of Odd digits in a number
 
 #include<stdio.h>
#include<stdlib.h>
//program to count the sum of odd digits in a number
int main(int argCount, char *args[])
{
    int input_number = atoi(args[1]);
    printf("User given number is %d \n", input_number);
    int odddigit_sum = 0, remainder_digit = 0;
    while (input_number != 0)
    {
        remainder_digit = input_number % 10;
        if (remainder_digit % 2 != 0)
            odddigit_sum += remainder_digit;
        input_number = input_number / 10;
    }
printf("sum of odd digits: %d", odddigit_sum);
}
 
-------------------------------------------------------
p32
Check if a number is Palindrome
 
--------------------------------------------------------
p33a
Find sum of Odd placed digits in a number
 
#include<stdio.h>
#include<stdlib.h>
//program to count the sum of odd placed digits in a number
int main(int argCount, char *args[])
{
   int inputNumber = atoi(args[1]);
    int sumOfDigits1 = 0, sumOfDigits2 = 0, flip = 0, remainderDigit = 0;
    printf("User given number is %d \n", inputNumber);
    while (inputNumber != 0)
    {
        remainderDigit = inputNumber % 10;
        inputNumber = inputNumber / 10;
        if (flip == 0)
        {
            sumOfDigits1 += remainderDigit;
            flip = 1;
        }
        else
        {
            sumOfDigits2 += remainderDigit;
            flip = 0;
        }
    }
    if (flip == 0)
        printf("Sum of odd placed digits is %d", sumOfDigits2);
    else
        printf("Sum of odd placed digits is %d", sumOfDigits1);
}

/*itr=1 while 4856 != 0
rem = 4856 % 10     (6)
4856 = 4856 / 10    (485 flip0)
sum1 = 0+6=6 (flip=1)

itr=2 while 485 != 0
rem = 485 % 10     (5)
485 = 485 / 10    (48 flip1)
sum2 = 0+5=5 (flip=0)

itr=3 while 48 != 0
rem = 48 % 10     (8)
48 = 48 / 10    (4 flip0)
sum1 = 6+4 =10 (flip=1)

itr=4 while 4 != 0
rem = 4 % 10     (4)
4 = 4 / 10    (0 flip1)
sum1 = 5+4=9 (flip=0)

as flip==0 
prints sum1 
o/p = sum of odd placed digits is 9

 */
 ----------------------------------------------------
 p33b
 
 #include<stdio.h>
#include<stdlib.h>
//program to Find sum of Odd placed Odd digits in a number
int main(int argCount, char *args[])
{
   int inputNumber = atoi(args[1]);
    int sumOfDigits1 = 0, sumOfDigits2 = 0, flip = 0, remainderDigit = 0;
    printf("User given number is %d \n", inputNumber);
    while (inputNumber != 0)
    {
        remainderDigit = inputNumber % 10;
        inputNumber = inputNumber / 10;
        if (flip == 0)
        {
            if (remainderDigit % 2 != 0)
                sumOfDigits1 += remainderDigit;
            flip = 1;
        }
        else
        {
            if (remainderDigit % 2 != 0)
                sumOfDigits2 += remainderDigit;
            flip = 0;
        }
    }
    if (flip == 1)
        printf("Sum of Odd placed odd digits is %d", sumOfDigits1);
    else
        printf("Sum of Odd placed odd digits is %d", sumOfDigits2);
}
 
 --------------------------------------------------
 
 p33c
 
 #include<stdio.h>
#include<stdlib.h>
//program to Find sum of even placed Odd digits in a number
int main(int argCount, char *args[])
{
   int inputNumber = atoi(args[1]);
    int sumOfDigits1 = 0, sumOfDigits2 = 0, flip = 0, remainderDigit = 0;
    printf("User given number is %d \n", inputNumber);
    while (inputNumber != 0)
    {
        remainderDigit = inputNumber % 10;
        inputNumber = inputNumber / 10;
        if (flip == 0)
        {
            if (remainderDigit % 2 != 0)
                sumOfDigits1 += remainderDigit;
            flip = 1;
        }
        else
        {
            if (remainderDigit % 2 != 0)
                sumOfDigits2 += remainderDigit;
            flip = 0;
        }
    }
    if (flip == 0)
        printf("Sum of even placed odd digits is %d", sumOfDigits1);
    else
        printf("Sum of even placed odd digits is %d", sumOfDigits2);
}

/*itr=1 while 4855 != 0 (True)
rem = 4875 % 10     (5)
4875 = 4875 / 10    (487 flip0)
5 % 2 != 0 (true)
sum1 = 0+5 =5 (flip=1)

itr=2 while 487 != 0 (True)
rem = 487 % 10     (5)
487 = 487 / 10    (48 flip1)
7 % 2 != 0 (true)
sum2 = 0+7 =7 (flip=0)

itr=3 while 48 != 0 (True)
rem = 48 % 10     (8)
48 = 48 / 10    (4 flip0)
8 % 2 != 0 (False)
sum1 = 5+0 =5 (flip=1)

itr=4 while 4 != 0 (True)
rem = 4 % 10     (4)
4 = 4 / 10    (0 flip1)
4 % 2 != 0 (false)
sum2 = 7+0 =7 (flip=0)

flip = 0 prints sum1 =5

 */
 
-----------------------------------------------------------

p30d

#include<stdio.h>
#include<stdlib.h>
//program to Find sum of even placed even digits in a number
int main(int argCount, char *args[])
{
   int inputNumber = atoi(args[1]);
    int sumOfDigits1 = 0, sumOfDigits2 = 0, flip = 0, remainderDigit = 0;
    printf("User given number is %d \n", inputNumber);
    while (inputNumber != 0)
    {
        remainderDigit = inputNumber % 10;
        inputNumber = inputNumber / 10;
        if (flip == 0)
        {
            if (remainderDigit % 2 == 0)
                sumOfDigits1 += remainderDigit;
            flip = 1;
        }
        else
        {
            if (remainderDigit % 2 == 0)
                sumOfDigits2 += remainderDigit;
            flip = 0;
        }
    }
    if (flip == 0)
        printf("Sum of even placed even digits is %d", sumOfDigits1);
    else
        printf("Sum of even placed even digits is %d", sumOfDigits2);
}

/*itr=1 while 4855 != 0 (True)
rem = 4855 % 10     (5)
4855 = 4855 / 10    (485 flip0)
5 % 2 == 0 (False)
sum1 = 0+0 =0 (flip=1)

itr=2 while 485 != 0 (True)
rem = 485 % 10     (5)
485 = 485 / 10    (48 flip1)
5 % 2 == 0 (False)
sum2 = 0+0 =0 (flip=0)

itr=3 while 48 != 0 (True)
rem = 48 % 10     (8)
48 = 48 / 10    (4 flip0)
8 % 2 == 0 (True)
sum1 = 0+8 =8 (flip=1)

itr=4 while 4 != 0 (True)
rem = 4 % 10     (4)
4 = 4 / 10    (0 flip1)
4 % 2 == 0 (true)
sum2 = 0+4 =4 (flip=0)

flip = 0 prints sum1 =8

 */
------------------------------------------------------
p34a
Find sum of the series: n + n2 + n3 + .... 10 terms
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
//program to find the sum of series n + n1 + n2 + ... 10 terms
int main(int argCount, char *args[])
{
   int termValue = atoi(args[1]);
   int numberOfTerms = 10;
   long long int sumOfTerms = 0;
   printf("value of n = %d", termValue);

   for (int i = 0; i <= 10; i++)
   {
     sumOfTerms += pow(termValue, i);
   }
   printf("sum of %d terms is %ld", termValue, sumOfTerms);

}
 ----------------------------------------------------------------
p34b
Find sum of the series: 1 - n + n2 - n3 + .... m terms
 
 #include <stdio.h>
#include <stdlib.h>
#include <math.h>

long long int findSumOFDigits(int n, int m)
{
    long long int sumOfTerms = 0;
    for (int i = 1; i <= m; i++)
    {
        sumOfTerms += pow(n, i - 1) * pow(-1, i - 1);
    }
    return sumOfTerms;
}

int main(int argCount, char *args[])
{
    int termValue = atoi(args[1]);
    int numberOfTerms = atoi(args[2]);
    printf("N value = %d, Number of terms = %d \n", termValue, numberOfTerms);

    long long int sumOfTerms = findSumOFDigits(termValue, numberOfTerms);

    printf("Sum of %d terms is %ld", numberOfTerms, sumOfTerms);
}
 -------------------------------------------------------
 
p34c
Find sum of the series: n - n2/3 + n4/5 - n8/7 + .... m terms (1<=n<=3,1<=m<=10)
---------------------------------------------------------

O(n2) Problems:
1. Find Nth Prime number
2. Print the Prime numbers between M and N in decreasing order (N>M)
3. Find Nth term of the series: 1 2 2 3 3 5 5 7 8 11 13 13
4. Print the following shapes of N lines made up of Stars
A) Right Angled Triangle
B) Pyramid (Equilateral Triangle)
C) Hollow Square
D) X Shape
E) X shape inside Hollow Square
F) Hollow Rhombus
G) Hexagon (Benzene Ring C6H6)